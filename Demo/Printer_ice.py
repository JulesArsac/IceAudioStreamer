# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Printer.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if '_t_Bytes' not in _M_Demo.__dict__:
    _M_Demo._t_Bytes = IcePy.defineSequence('::Demo::Bytes', (), IcePy._t_byte)

if 'StreamingInfo' not in _M_Demo.__dict__:
    _M_Demo.StreamingInfo = Ice.createTempClass()
    class StreamingInfo(Ice.Value):
        def __init__(self, url='', clientIP='', duration=0):
            self.url = url
            self.clientIP = clientIP
            self.duration = duration

        def ice_id(self):
            return '::Demo::StreamingInfo'

        @staticmethod
        def ice_staticId():
            return '::Demo::StreamingInfo'

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_StreamingInfo)

        __repr__ = __str__

    _M_Demo._t_StreamingInfo = IcePy.defineValue('::Demo::StreamingInfo', StreamingInfo, -1, (), False, False, None, (
        ('url', (), IcePy._t_string, False, 0),
        ('clientIP', (), IcePy._t_string, False, 0),
        ('duration', (), IcePy._t_long, False, 0)
    ))
    StreamingInfo._ice_type = _M_Demo._t_StreamingInfo

    _M_Demo.StreamingInfo = StreamingInfo
    del StreamingInfo

_M_Demo._t_Printer = IcePy.defineValue('::Demo::Printer', Ice.Value, -1, (), False, True, None, ())

if 'PrinterPrx' not in _M_Demo.__dict__:
    _M_Demo.PrinterPrx = Ice.createTempClass()
    class PrinterPrx(Ice.ObjectPrx):

        def playMusic(self, s, context=None):
            return _M_Demo.Printer._op_playMusic.invoke(self, ((s, ), context))

        def playMusicAsync(self, s, context=None):
            return _M_Demo.Printer._op_playMusic.invokeAsync(self, ((s, ), context))

        def begin_playMusic(self, s, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Printer._op_playMusic.begin(self, ((s, ), _response, _ex, _sent, context))

        def end_playMusic(self, _r):
            return _M_Demo.Printer._op_playMusic.end(self, _r)

        def getSongList(self, context=None):
            return _M_Demo.Printer._op_getSongList.invoke(self, ((), context))

        def getSongListAsync(self, context=None):
            return _M_Demo.Printer._op_getSongList.invokeAsync(self, ((), context))

        def begin_getSongList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Printer._op_getSongList.begin(self, ((), _response, _ex, _sent, context))

        def end_getSongList(self, _r):
            return _M_Demo.Printer._op_getSongList.end(self, _r)

        def getSearchByTitle(self, title, context=None):
            return _M_Demo.Printer._op_getSearchByTitle.invoke(self, ((title, ), context))

        def getSearchByTitleAsync(self, title, context=None):
            return _M_Demo.Printer._op_getSearchByTitle.invokeAsync(self, ((title, ), context))

        def begin_getSearchByTitle(self, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Printer._op_getSearchByTitle.begin(self, ((title, ), _response, _ex, _sent, context))

        def end_getSearchByTitle(self, _r):
            return _M_Demo.Printer._op_getSearchByTitle.end(self, _r)

        def getSearchByAuthor(self, author, context=None):
            return _M_Demo.Printer._op_getSearchByAuthor.invoke(self, ((author, ), context))

        def getSearchByAuthorAsync(self, author, context=None):
            return _M_Demo.Printer._op_getSearchByAuthor.invokeAsync(self, ((author, ), context))

        def begin_getSearchByAuthor(self, author, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Printer._op_getSearchByAuthor.begin(self, ((author, ), _response, _ex, _sent, context))

        def end_getSearchByAuthor(self, _r):
            return _M_Demo.Printer._op_getSearchByAuthor.end(self, _r)

        def changeSongTitle(self, title, newTitle, context=None):
            return _M_Demo.Printer._op_changeSongTitle.invoke(self, ((title, newTitle), context))

        def changeSongTitleAsync(self, title, newTitle, context=None):
            return _M_Demo.Printer._op_changeSongTitle.invokeAsync(self, ((title, newTitle), context))

        def begin_changeSongTitle(self, title, newTitle, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Printer._op_changeSongTitle.begin(self, ((title, newTitle), _response, _ex, _sent, context))

        def end_changeSongTitle(self, _r):
            return _M_Demo.Printer._op_changeSongTitle.end(self, _r)

        def changeSongAuthor(self, title, newAuthor, context=None):
            return _M_Demo.Printer._op_changeSongAuthor.invoke(self, ((title, newAuthor), context))

        def changeSongAuthorAsync(self, title, newAuthor, context=None):
            return _M_Demo.Printer._op_changeSongAuthor.invokeAsync(self, ((title, newAuthor), context))

        def begin_changeSongAuthor(self, title, newAuthor, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Printer._op_changeSongAuthor.begin(self, ((title, newAuthor), _response, _ex, _sent, context))

        def end_changeSongAuthor(self, _r):
            return _M_Demo.Printer._op_changeSongAuthor.end(self, _r)

        def deleteSong(self, title, context=None):
            return _M_Demo.Printer._op_deleteSong.invoke(self, ((title, ), context))

        def deleteSongAsync(self, title, context=None):
            return _M_Demo.Printer._op_deleteSong.invokeAsync(self, ((title, ), context))

        def begin_deleteSong(self, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Printer._op_deleteSong.begin(self, ((title, ), _response, _ex, _sent, context))

        def end_deleteSong(self, _r):
            return _M_Demo.Printer._op_deleteSong.end(self, _r)

        def stopMusic(self, context=None):
            return _M_Demo.Printer._op_stopMusic.invoke(self, ((), context))

        def stopMusicAsync(self, context=None):
            return _M_Demo.Printer._op_stopMusic.invokeAsync(self, ((), context))

        def begin_stopMusic(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Printer._op_stopMusic.begin(self, ((), _response, _ex, _sent, context))

        def end_stopMusic(self, _r):
            return _M_Demo.Printer._op_stopMusic.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.PrinterPrx.ice_checkedCast(proxy, '::Demo::Printer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.PrinterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Printer'
    _M_Demo._t_PrinterPrx = IcePy.defineProxy('::Demo::Printer', PrinterPrx)

    _M_Demo.PrinterPrx = PrinterPrx
    del PrinterPrx

    _M_Demo.Printer = Ice.createTempClass()
    class Printer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Printer', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Printer'

        @staticmethod
        def ice_staticId():
            return '::Demo::Printer'

        def playMusic(self, s, current=None):
            raise NotImplementedError("servant method 'playMusic' not implemented")

        def getSongList(self, current=None):
            raise NotImplementedError("servant method 'getSongList' not implemented")

        def getSearchByTitle(self, title, current=None):
            raise NotImplementedError("servant method 'getSearchByTitle' not implemented")

        def getSearchByAuthor(self, author, current=None):
            raise NotImplementedError("servant method 'getSearchByAuthor' not implemented")

        def changeSongTitle(self, title, newTitle, current=None):
            raise NotImplementedError("servant method 'changeSongTitle' not implemented")

        def changeSongAuthor(self, title, newAuthor, current=None):
            raise NotImplementedError("servant method 'changeSongAuthor' not implemented")

        def deleteSong(self, title, current=None):
            raise NotImplementedError("servant method 'deleteSong' not implemented")

        def stopMusic(self, current=None):
            raise NotImplementedError("servant method 'stopMusic' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_PrinterDisp)

        __repr__ = __str__

    _M_Demo._t_PrinterDisp = IcePy.defineClass('::Demo::Printer', Printer, (), None, ())
    Printer._ice_type = _M_Demo._t_PrinterDisp

    Printer._op_playMusic = IcePy.Operation('playMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Demo._t_StreamingInfo, False, 0), ())
    Printer._op_getSongList = IcePy.Operation('getSongList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Printer._op_getSearchByTitle = IcePy.Operation('getSearchByTitle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Printer._op_getSearchByAuthor = IcePy.Operation('getSearchByAuthor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Printer._op_changeSongTitle = IcePy.Operation('changeSongTitle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    Printer._op_changeSongAuthor = IcePy.Operation('changeSongAuthor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    Printer._op_deleteSong = IcePy.Operation('deleteSong', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Printer._op_stopMusic = IcePy.Operation('stopMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Demo.Printer = Printer
    del Printer

_M_Demo._t_FileTransfer = IcePy.defineValue('::Demo::FileTransfer', Ice.Value, -1, (), False, True, None, ())

if 'FileTransferPrx' not in _M_Demo.__dict__:
    _M_Demo.FileTransferPrx = Ice.createTempClass()
    class FileTransferPrx(Ice.ObjectPrx):

        def sendFile(self, data, title, context=None):
            return _M_Demo.FileTransfer._op_sendFile.invoke(self, ((data, title), context))

        def sendFileAsync(self, data, title, context=None):
            return _M_Demo.FileTransfer._op_sendFile.invokeAsync(self, ((data, title), context))

        def begin_sendFile(self, data, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.FileTransfer._op_sendFile.begin(self, ((data, title), _response, _ex, _sent, context))

        def end_sendFile(self, _r):
            return _M_Demo.FileTransfer._op_sendFile.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.FileTransferPrx.ice_checkedCast(proxy, '::Demo::FileTransfer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.FileTransferPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::FileTransfer'
    _M_Demo._t_FileTransferPrx = IcePy.defineProxy('::Demo::FileTransfer', FileTransferPrx)

    _M_Demo.FileTransferPrx = FileTransferPrx
    del FileTransferPrx

    _M_Demo.FileTransfer = Ice.createTempClass()
    class FileTransfer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::FileTransfer', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::FileTransfer'

        @staticmethod
        def ice_staticId():
            return '::Demo::FileTransfer'

        def sendFile(self, data, title, current=None):
            raise NotImplementedError("servant method 'sendFile' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_FileTransferDisp)

        __repr__ = __str__

    _M_Demo._t_FileTransferDisp = IcePy.defineClass('::Demo::FileTransfer', FileTransfer, (), None, ())
    FileTransfer._ice_type = _M_Demo._t_FileTransferDisp

    FileTransfer._op_sendFile = IcePy.Operation('sendFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_Bytes, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())

    _M_Demo.FileTransfer = FileTransfer
    del FileTransfer

# End of module Demo
